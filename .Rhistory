head(subset)
pca <- preProcess(, thresh = 0.9)
pca <- preProcess(subset, thresh = 0.9)
pca
pca$pcaComp
pca <- preProcess(subset, method="pca", thresh = 0.9)
pca
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
subset <- training[,c(grepl("^IL", names(training)),1)]
names(subset)
grepl("^IL", names(training))
grep("^IL", names(training))
c(1, grep("^IL", names(training)))
subset <- training[,c(1, grep("^IL", names(training)))]
names(subset)
subset <- training[,c(1, grep("^IL", names(training)))]
pca <- preProcess(subset, method="pca", thresh = 0.9)
pca <- preProcess(subset[,-1], method="pca", thresh = 0.9)
pca
modelAll <- train(diagnosis ~ ., data = subset, method ="glm")
modelPCA <- train(diagnosis ~ ., data = subset, method ="glm", preProcess(method="pca", thresh = 0.9))
modelPCA <- train(diagnosis ~ ., data = subset, method ="glm", preProcess(subset[,-1], method="pca", thresh = 0.9))
predict(testing, pca)
predict(pca, testing)
predict(pca, testing[,c(1, grep("^IL", names(training)))])
testing[,c(1, grep("^IL", names(training)))]
predict(pca, testing[,c(grep("^IL", names(training)))])
predict(pca, testing[,c(grep("^IL", names(training)))])
trainingTransformed <- predict(pca, training[,c(grep("^IL", names(training)))])
head(trainingTransformed)
trainingTransformed <- predict(pca, training[,c(grep("^IL", names(training)))])
testingTransformed <- predict(pca, testing[,c(grep("^IL", names(training)))])
modelPCA <- train(diagnosis ~ ., data = trainingTransformed, method ="glm")
modelPCA <- train(training$diagnosis ~ ., data = trainingTransformed, method ="glm")
predict(modelPCA, testingTransformed)
prediction <- predict(modelPCA, testingTransformed)
prediction
class(prediction)
predict(modelAll, testing)
prediction_1 <- predict(modelAll, testing)
prediction_2 <- predict(modelPCA, testingTransformed)
prediction_1 = testing$diagnosis
prediction_1 <- predict(modelAll, testing)
prediction_1 == testing$diagnosis
sum(prediction_1 == testing$diagnosis) / length(prediction_1)
sum(prediction_2 == testing$diagnosis) / length(prediction_1)
log(0)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subset <- training[,grepl("^IL", names(training))]
pca <- preProcess(subset, method="pca", thresh = 0.8)
pca
pca$pcaComp
pca$numComp
x <- c('a', 'b')
comb(x,2)
combn(x,2)
x <- c('x', 'y', 'z')
combn(x,3)
combn(x,2)
data.frame(a=c(12), b="ds"))
customer <- c("A", "A", "A", "B", "B", "C", "C")
product  <- c("X", "Y", "Z", "X", "Y", "X", "Z")
price  <- c(10,5,2,2,10,3,7)
cbind(customer, product, price)
def
df
data
myData <- cbind(customer, product, price)
myData
myData$price
myData <- data.frame(myData)
myData$price
myData
combn(myData$product)
combn(myData$product, 3)
x <- combn(myData$product, 3)
uniqe(x)
unique(x)
combinations(myData$product)
library(gtools)
combinations(myData$product)
combinations(3,2,letters[1:3],repeats=TRUE)
combinations(3,2,letters[1:3],repeats=FALSE)
combinations(3,2:3,letters[1:3],repeats=FALSE)
combinations(3,2:3,letters[1:3],repeats=FALSE)
combinations(3,3,letters[1:3],repeats=FALSE)
combinations(3,2,letters[1:3],repeats=FALSE)
combn(myData$product, 2)
combn(unique(myData$product), 2)
combn(unique(myData$product), 3)
combn(unique(myData$product), 2)
x <- combn(unique(myData$product), 2)
y <- combn(unique(myData$product), 3)
cbind(x,y)
x
y
cbind(y,x)
y
data.frakme(y)
data.frame(y)
y <- data.frame(y)
merge(myData, y, by.x=product, by.y=y, all.x=T)
merge(myData, y, by.x="product", by.y="y", all.x=T)
data.frame(y,"yes")
y <- data.frame(y,"yes")
merge(myData, y, by.x="product", by.y="y", all.x=T)
merge(myData, x, by.x="product", by.y="y", all.x=T)
x <- data.frame(x,"yes")
merge(myData, x, by.x="product", by.y="y", all.x=T)
x
x <- combn(unique(myData$product), 2)
x
x <- data.frame(x,"yes")
x
x <- combn(unique(myData$product), 2)
x <- data.frame(x[,1],"yes")
x
merge(myData, x, by.x="product", by.y="y", all.x=T)
x
names(x) <- c("product", "take")
merge(myData, x, all.x=T)
customer <- c("A","A","A","B","B","C","C")
product <- c("X","Y","Z","X","Y","X","Z")
price <- c(10,5,2,2,10,3,7)
myData <- cbind(customer, product, price)
myData <- data.frame(myData)
myData$price <- as.numeric(as.character(myData$price))
myData$customer <- as.character(myData$customer)
myData$product <- as.character(myData$product)
str(myData)
myRData <- reshape(myData,
timevar = "product",
idvar = c("customer"),
direction = "wide")
names(myRData) <- c("customer", "X", "Y", "Z")
myRData
myRData
#http://stackoverflow.com/questions/13258586/given-a-vector-return-a-list-of-all-combinations-up-to-size-n
multi_combn <- function(dat, n) {
unlist(lapply(2:n, function(x) combn(dat, x, simplify=F)), recursive=F)
}
warenkoerbe <- multi_combn(unique(myData$product), length(unique(myData$product)))
warenkoerbe
result <- sapply(warenkoerbe, FUN = function(warenkorb)
{
rowsToIncorporate <- which(rowSums(is.na(myRData[, warenkorb]))==0)
return(sum(myRData[rowsToIncorporate, warenkorb]))
})
result
result
##### part 1
##### create data frame with example values
customer <- c("A","A","A","B","B","C","C")
product <- c("X","Y","Z","X","Y","X","Z")
price <- c(10,5,2,2,10,3,7)
myData <- cbind(customer, product, price)
myData <- data.frame(myData)
myData$price <- as.numeric(as.character(myData$price))
myData$customer <- as.character(myData$customer)
myData$product <- as.character(myData$product)
str(myData)
##### part 2
##### reshape data frame
myRData <- reshape(myData,
timevar = "product",
idvar = c("customer"),
direction = "wide")
names(myRData) <- c("customer", "X", "Y", "Z")
myRData
##### part 3
##### calculate all possible item sets
#http://stackoverflow.com/questions/13258586/given-a-vector-return-a-list-of-all-combinations-up-to-size-n
multi_combn <- function(dat, n) {
unlist(lapply(2:n, function(x) combn(dat, x, simplify=F)), recursive=F)
}
warenkoerbe <- multi_combn(unique(myData$product), length(unique(myData$product)))
warenkoerbe
##### part 4
##### the magic
result <- sapply(warenkoerbe, FUN = function(warenkorb)
{
rowsToIncorporate <- which(rowSums(is.na(myRData[, warenkorb]))==0)
return(sum(myRData[rowsToIncorporate, warenkorb]))
})
warenkoerbe
result
customer <- c("A","A","A","B","B","C","C")
product <- c("X","Y","Z","X","Y","X","Z")
price <- c(10,5,2,2,10,3,7)
myData <- cbind(customer, product, price)
myData <- data.frame(myData)
myData$price <- as.numeric(as.character(myData$price))
myData$customer <- as.character(myData$customer)
myData$product <- as.character(myData$product)
str(myData)
myData
myRData <- reshape(myData,
timevar = "product",
idvar = c("customer"),
direction = "wide")
names(myRData) <- c("customer", "X", "Y", "Z")
myRData
#http://stackoverflow.com/questions/13258586/given-a-vector-return-a-list-of-all-combinations-up-to-size-n
multi_combn <- function(dat, n) {
unlist(lapply(2:n, function(x) combn(dat, x, simplify=F)), recursive=F)
}
warenkoerbe <- multi_combn(unique(myData$product), length(unique(myData$product)))
warenkoerbe
c
result <- sapply(warenkoerbe, FUN = function(warenkorb)
{
rowsToIncorporate <- which(rowSums(is.na(myRData[, warenkorb]))==0)
return(sum(myRData[rowsToIncorporate, warenkorb]))
})
result
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
str(segmentationOriginal)
trainingData <- segmentationOriginal[Case==2,]
segmentationOriginal[1:5,1:5]
trainingData <- segmentationOriginal[segmentationOriginal$Case="Train",]
trainingData <- segmentationOriginal[segmentationOriginal$Case=="Train",]
trainingData[1:5,1:5]
set.seed(125)
getModelInfo()
cartModel <- train(Class ~ ., data=trainingData, method="cart")
cartModel <- train(Class ~ ., data=trainingData, method="rpart")
cartModel
dim(trainingData)
cartModel$finalModel
plot(cartModel)
library(plot.rpart)
plot(cartModel)
plot(cartModel$)
plot(cartModel$finalModel
plot(cartModel$finalModel)
plot(cartModel)
plot(cartModel$metric)
plot(cartModel$method)
cartModel$method
cartModel$modelInfo
cartModel$results
cartModel$pred
cartModel$metric
cartModel$finalModel
plot.rpart(cartModel)
library(rpart.plot)
plot.rpart(cartModel)
prp(cartModel)
prp(cartModel$finalModel)
cartModel$finalModel
library(pgmm)
data(olive)
olive=olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
head(newdata)
oliveTree <- train(Area ~ ., data=olive)
oliveTree <- train(Area ~ ., data=olive, method="rpart")
prp(oliveTree$finalModel)
predict(newdata)
predict(oliveTree,newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train <- sample(1:nrow(SAheart), size=nrow(SAheart)/2, replace=F)
head(train)
train
order(train)
set.seed(13234)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train <- sample(1:nrow(SAheart), size=nrow(SAheart)/2, replace=F)
set.seed(13234)
str(SAheart)
model <- train(chd ~ alcohol + obesity + tobacco + typea + ldl, data=SAheart, method="glm", family="binomial")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train <- sample(1:nrow(SAheart), size=nrow(SAheart)/2, replace=F)
trainSA <- SAheart[train,]
testSA <- SAheart[-train,]
set.seed(13234)
str(SAheart)
model <- train(chd ~ alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family="binomial")
str(trainSA)
trainSA[,-chd]
trainSA[,-"chd"]
trainSA[,-10]
str(trainSA)
trainingPred <- predict(model, trainSA[,-10])
trainingPred
testPred <- predict(model, testSA[,-10])
testPred
missClass <- function(values, prediction)
{
sum((prediction > 0.5) * 1) != values) / length(values)
}
missClass <- function(values, prediction){
sum((prediction > 0.5) * 1) != values) / length(values)
}
missClass <- function(values, prediction){
sum(((prediction > 0.5) * 1) != values) / length(values)
}
misclassRateTrain <- missClass(trainSA[,10], trainingPred)
misclassRateTest <- missClass(testSA[,10], testPred)
misclassRateTrain
misclassRateTest
misclassRateTest
misclassRateTrain
library(ElemStatLearn)
data(vowel.train)
data(vowel,test)
data(vowel.test)
testData <- vowel.test
trainingData
str(trainingData)
names(trainingData)
names(trainData)
trainData <- vowel.train
testData <- vowel.test
names(trainData)
names(testData)
trainData$y  <- as.factor(trainData$y)
testData$y  <- as.factor(testData$y)
testData$y
str(trainingData)
str(trainData)
set.seed(33833)
vowelModel <- train(y ~ ., data=trainData, method="rf")
vowelModel
vowelModel$
vowelModel$metric
vowelModel$finalModel
vowelModel$coefnames
varImp(vowelModel)
customer <- c("A","A","A","B","B","C","C")
product <- c("X","Y","Z","X","Y","X","Z")
price <- c(10,5,2,2,10,3,7)
myData <- cbind(customer, product, price)
myData <- data.frame(myData)
myData$price <- as.numeric(as.character(myData$price))
myData$customer <- as.character(myData$customer)
myData$product <- as.character(myData$product)
str(myData)
myData
myRData <- reshape(myData,
timevar = "product",
idvar = c("customer"),
direction = "wide")
names(myRData) <- c("customer", "X", "Y", "Z")
myRData
multi_combn <- function(dat, n) {
unlist(lapply(2:n, function(x) combn(dat, x, simplify=F)), recursive=F)
}
warenkoerbe <- multi_combn(unique(myData$product), length(unique(myData$product)))
warenkoerbe
myRData
result <- sapply(warenkoerbe, FUN = function(warenkorb)
{
rowsToIncorporate <- which(rowSums(is.na(myRData[, warenkorb]))==0)
return(sum(myRData[rowsToIncorporate, warenkorb]))
})
result
myRData
customer <- c("A","A","A","B","B","C","C")
product <- c("X","Y","Z","X","Y","X","Z")
price <- c(10,5,2,2,10,3,7)
myData <- cbind(customer, product, price)
myData <- data.frame(myData)
myData$price <- as.numeric(as.character(myData$price))
myData$customer <- as.character(myData$customer)
myData$product <- as.character(myData$product)
str(myData)
myData
myData
myRData <- reshape(myData,
timevar = "product",
idvar = c("customer"),
direction = "wide")
names(myRData) <- c("customer", "X", "Y", "Z")
myRData
#http://stackoverflow.com/questions/13258586/given-a-vector-return-a-list-of-all-combinations-up-to-size-n
multi_combn <- function(dat, n) {
unlist(lapply(2:n, function(x) combn(dat, x, simplify=F)), recursive=F)
}
warenkoerbe <- multi_combn(unique(myData$product), length(unique(myData$product)))
warenkoerbe
result <- sapply(warenkoerbe, FUN = function(warenkorb)
{
rowsToIncorporate <- which(rowSums(is.na(myRData[, warenkorb]))==0)
return(sum(myRData[rowsToIncorporate, warenkorb]))
})
warenkoerbe
result
unlist(warenkoerbe)
c(warenkoerbe, 'asd')
cbind(warenkoerbe, 'asd')
data.frame(warenkoerbe)
str(warenkoerbe)
as.data.frame(warenkoerbe)
asdf <- warenkoerbe
asdf[1]
str(asdf[1])
asdf[[1]]
str(asdf[[1]])
test <- asdf[[1]]
test
str(asdf[1])
str(asdf[[1]])
str(asdf[[1]])
paste(asdf[[1]])
paste(asdf[[1]], sep = ',')
paste(asdf[[1]], collapse = ',')
sapply(warenkoerbe, paste(asdf[[1]], collapse = ',')
sapply(warenkoerbe, paste(asdf[[1]], collapse = ','))
sapply(warenkoerbe, FUN = function(warenkorb)
{
return (paste(warenkorb, collapse = ',')))
}
sapply(warenkoerbe, FUN = function(warenkorb)
{
return (paste(warenkorb, collapse = ','))
})
xzy <- sapply(warenkoerbe, FUN = function(warenkorb)
{
return (paste(warenkorb, collapse = ','))
})
str(xzy)
t(xzy)
data.frame(xzy)
data.frame(xzy, result)
result <- data.frame(xzy, resultScore)
result
result <- data.frame(xzy, resultScore)
resultScore <- sapply(warenkoerbe, FUN = function(warenkorb)
{
rowsToIncorporate <- which(rowSums(is.na(myRData[, warenkorb]))==0)
return(sum(myRData[rowsToIncorporate, warenkorb]))
})
warenkoerbe
resultScore
## create result table
xzy <- sapply(warenkoerbe, FUN = function(warenkorb) {return (paste(warenkorb, collapse = ','))})
result <- data.frame(xzy, resultScore)
result
itemset <- sapply(warenkoerbe, FUN = function(warenkorb) {return (paste(warenkorb, collapse = ','))})
result <- data.frame(itemset, resultScore)
result
result
salijdsk
setwd("004_schulungen/2016/05_PracticalMachineLearning/assignment/")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", "pml-training.csv")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", "pml-testing.csv")
trainingData <- read.csv("pml-training.csv")
testingData <- read.csv("pml-testing.csv")
str(trainingData)
names(trainingData)
dim(trainingData)
dim(trainingData)
names(trainingData)
unique(trainingData$classe)
library(caret)
nearZeroVar(trainingData)
trainingData[6]
nearZeroVar(trainingData)
nzvIndices <- nearZeroVar(trainingData)
trainingDataPristine <- read.csv("pml-training.csv")
testingDataPristine <- read.csv("pml-testing.csv")
setwd("004_schulungen/2016/05_PracticalMachineLearning/assignment/")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", "pml-training.csv")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", "pml-testing.csv")
```{r}
trainingDataPristine <- read.csv("pml-training.csv")
testingDataPristine <- read.csv("pml-testing.csv")
trainingDataPristine <- read.csv("pml-training.csv")
setwd("004_schulungen/2016/05_PracticalMachineLearning/assignment/")
getwd()
trainingDataPristine <- read.csv("pml-training.csv")
